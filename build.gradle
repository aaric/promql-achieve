plugins {
	id "java"
	id "checkstyle"
	id "io.freefair.lombok" version "4.1.6"
	id "org.springframework.boot" version "2.3.2.RELEASE"
	id "io.spring.dependency-management" version "1.0.10.RELEASE"
}

group = "com.example"
version = "0.5.0-SNAPSHOT"
sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
	maven { url "https://maven.aliyun.com/repository/public" }
	maven { url "https://repository.incarcloud.com/content/groups/public" }
}

dependencies {
	implementation "org.springframework.boot:spring-boot-starter-thymeleaf"

	implementation "org.springframework.boot:spring-boot-starter-aop"
	implementation "org.springframework.boot:spring-boot-starter-actuator"
//	implementation "io.micrometer:micrometer-registry-prometheus"

    implementation "io.springfox:springfox-swagger2"
	implementation "com.github.xiaoymin:knife4j-spring-boot-starter"

	implementation "org.springframework.boot:spring-boot-starter-undertow"
	implementation("org.springframework.boot:spring-boot-starter-web") {
		exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
	}

	testImplementation("org.springframework.boot:spring-boot-starter-test") {
		exclude group: "org.junit.vintage", module: "junit-vintage-engine"
	}
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:Hoxton.SR8"
		mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:2.2.3.RELEASE"
	}

	dependencies {
		dependencySet(group: "org.slf4j", version: "1.7.30") {
			entry "slf4j-api"
			entry "slf4j-simple"
			entry "slf4j-log4j12"
		}

		dependency "io.springfox:springfox-swagger2:2.9.2"
		dependency "com.github.xiaoymin:knife4j-spring-boot-starter:2.0.4"

		dependency "io.micrometer:micrometer-registry-prometheus:1.6.1"
	}
}

test {
	useJUnitPlatform()
}

task checkstyle(type: Checkstyle) {
	configFile file("${rootDir}/config/checkstyle/checkstyle.xml")
	ignoreFailures true
	showViolations true
	source = fileTree("src")
	include "**/*.java"
	exclude "**/test/**"
	exclude "**/build/**"
	classpath = files()
}

task removeLombokConfig() {
	def subProjectPath = project.projectDir
	if (null != subProjectPath) {
		def lombokConfigFile = new File(subProjectPath, "lombok.config")
		if (lombokConfigFile.exists()) {
			lombokConfigFile.delete()
		}
	}
}

task removeOutputLog() {
	def subProjectPath = project.projectDir
	if (null != subProjectPath) {
		subProjectPath.list().each { filename ->
			if (filename.endsWith(".log")) {
				def logFile = new File(subProjectPath, filename)
				if (logFile.exists()) {
					logFile.delete()
				}
			}
		}
	}
}

defaultTasks "assemble"
